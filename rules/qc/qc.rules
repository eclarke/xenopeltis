# -*- mode: Snakemake -*-
#
# Illumina quality control rules

rule _qc_all:
    """Runs trimmomatic and fastqc on all input files."""
    input:
        expand(
            str(QC_FP/'paired'/'{sample}_{rp}_fastqc.zip'),
            sample = Samples.keys(),
            rp = ['R1', 'R2'])

rule custom_removal:
    input:
        r1 = lambda wildcards: Samples[wildcards.sample]['R1'],
        r2 = lambda wildcards: Samples[wildcards.sample]['R2']
    output:
        r1 = str(QC_FP/'cutadapt'/'{sample}_R1.fastq'),
        r2 = str(QC_FP/'cutadapt'/'{sample}_R2.fastq')
    params:
        fwd_adapters = " ".join(expand(
            "-b {adapter}", adapter=Cfg['qc']['fwd_adapters'])),
        rev_adapters = " ".join(expand(
            "-B {adapter}", adapter=Cfg['qc']['rev_adapters']))
    shell:
        """
        cutadapt --discard-trimmed\
        {params.fwd_adapters} {params.rev_adapters} \
        -o {output.r1} -p {output.r2} \
        {input.r1} {input.r2}
        """
        
rule trimmomatic:
    input:
        r1 = str(QC_FP/'cutadapt'/'{sample}_R1.fastq'),
        r2 = str(QC_FP/'cutadapt'/'{sample}_R2.fastq')
    output:
        pair_r1 = str(QC_FP/'paired'/'{sample}_R1.fastq.gz'),
        pair_r2 = str(QC_FP/'paired'/'{sample}_R2.fastq.gz'),
        unpair_r1 = str(QC_FP/'unpaired'/'{sample}_R1_unpaired.fastq.gz'),
        unpair_r2 = str(QC_FP/'unpaired'/'{sample}_R2_unpaired.fastq.gz')
    log:
        str(QC_FP/'log'/'trimmomatic'/'{sample}.out')
    params:
        sw_start = Cfg['qc']['slidingwindow'][0],
        sw_end = Cfg['qc']['slidingwindow'][1]
    shell:
        """
        trimmomatic \
        PE -threads {Cfg[all][subcores]} -phred33 \
        {input.r1} {input.r2} \
        {output.pair_r1} {output.unpair_r1} \
        {output.pair_r2} {output.unpair_r2} \
        ILLUMINACLIP:{Cfg[qc][adapter_fp]}:2:30:10:8:true \
        LEADING:{Cfg[qc][leading]} \
        TRAILING:{Cfg[qc][trailing]} \
        SLIDINGWINDOW:{params.sw_start}:{params.sw_end} \
        MINLEN:{Cfg[qc][minlen]} &> {log}\
        """

rule fastqc:
    input:
        r1 = str(QC_FP/'paired'/'{sample}_R1.fastq.gz'),
        r2 = str(QC_FP/'paired'/'{sample}_R2.fastq.gz')
    output:
        expand(
            str(QC_FP/'paired'/'{{sample}}_{rp}_fastqc.zip'),
            rp=['R1', 'R2'])
    shell: "fastqc {input.r1} {input.r2}"

