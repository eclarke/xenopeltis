# -*- mode: Snakemake -*-
#
# list the all input files for each step

####################
## qc
####################

### Quality-control reads
TARGET_QC = expand(str(QC_FP/'paired'/'{sample}_{rp}_fastqc/fastqc_data.txt'), sample = Samples.keys(), rp = ['R1','R2'])

### Remove host reads
TARGET_DECONTAM = expand(str(QC_FP/'decontam'/'{sample}_{rp}.fastq'), sample = Samples.keys(), rp = ['R1', 'R2'])

####################
## classify
####################

### Classify all reads
TARGET_KRAKEN = [str(CLASSIFY_FP/'kraken'/'all_samples.tsv')]
TARGET_CLASSIFY = TARGET_KRAKEN

####################
## assembly
####################

### Assemble contigs
TARGET_ASSEMBLY = (
    expand(str(ASSEMBLY_FP/'{sample}_assembly'/'final-contigs.fa'),
           sample = Samples.keys()) +
    expand(str(ASSEMBLY_FP/'{sample}_assembly'/'.save'),
           sample = Samples.keys()))
## Pair reads
TARGET_PAIR = expand(str(ASSEMBLY_FP/'paired'/'{sample}.assembled.fastq'), sample=Samples.keys())

####################
## mapping
####################

from pathlib import PurePath

def read_seq_ids(fasta_fp):
    """ Return the sequence identifiers for a given fasta filename. """
    ids = []
    with open(str(fasta_fp)) as f:
        for line in f:
            if line.startswith('>'):
                ids.append(re.split('[> ]', line)[1])
    return ids

# Find all genomes in the genomes_fp directory, and all sequences in each
# genome file.
GENOME_FILES = [f for f in Cfg['mapping']['genomes_fp'].glob('*.fasta')]
GENOMES = [PurePath(f.name).stem for f in Cfg['mapping']['genomes_fp'].glob('*.fasta')]
GENOME_SEGMENTS = {PurePath(g.name).stem: read_seq_ids(Cfg['mapping']['genomes_fp'] / g) for g in GENOME_FILES}
# Generate Snakemake template strings for a few commonly-used parameters below
# TODO: Should INDICES come from sunbeamlib.index_files()?
INDICES = expand(str(MAPPING_FP/"{{genome}}.{s}.bt2"), s=["1","2","3","4", "rev.1", "rev.2"])
GENOME = str(Cfg['mapping']['genomes_fp'] / "{genome}.fasta")

TARGET_MAPPING = [
        expand(str(MAPPING_FP/"{genome}-{sample}.sorted.bam.bai"), genome=GENOMES, sample=Samples.keys()),
        expand(str(MAPPING_FP/"{genome}-{sample}.raw.bcf"), genome=GENOMES, sample=Samples.keys()),
        [expand(str(MAPPING_FP/"{genome}-{segment}.alignment.png"), genome=g, segment=GENOME_SEGMENTS[g]) for g in GENOMES]]

####################
## annotation
####################

## Annotate all contigs
TARGET_ANNOTATE = expand(str(ANNOTATION_FP/'summary'/'{sample}.tsv'), sample=Samples.keys())

####################
## report
####################
TARGET_REPORT = [str(QC_FP/'preprocess_summary.tsv'), str(QC_FP/'fastqc_quality.tsv')]

TARGET_ALL = TARGET_QC + TARGET_DECONTAM + TARGET_CLASSIFY + TARGET_ASSEMBLY + TARGET_ANNOTATE + TARGET_REPORT + TARGET_MAPPING
