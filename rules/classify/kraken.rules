# -*- mode: Snakemake -*-
#
# Rules for running Kraken

rule all_classify:
    input:
        TARGET_CLASSIFY
        
rule kraken_biom:
    input:
        expand(str(CLASSIFY_FP/'kraken'/'{sample}-taxa.tsv'),
               sample=Samples.keys())
    output:
        str(CLASSIFY_FP/'kraken'/'all_samples.biom')
    shell:
        """
        kraken-biom --max D -o {output} {input}
        """

rule classic_biom:
    input:
        str(CLASSIFY_FP/'kraken'/'all_samples.biom')
    output:
        str(CLASSIFY_FP/'kraken'/'all_samples.tsv')
    shell:
        """
        biom convert -i {input} -o {output} \
        --to-tsv --header-key=taxonomy --process-obs-metadata=taxonomy \
        --output-metadata-id="Consensus Lineage"
        """
        
rule kraken_classify:
    input:
        str(QC_FP/'masked'/'{sample}.fasta')
    output:
        str(CLASSIFY_FP/'kraken'/'raw'/'{sample}-raw.tsv')
    threads:
        Cfg['classify']['threads']
    shell:
        """
        kraken \
        --db {Cfg[classify][kraken_db_fp]} \
        --threads {threads} \
        --fasta-input \
        {input} > {output}
        """

rule kraken_report:
    input:
        str(CLASSIFY_FP/'kraken'/'raw'/'{sample}-raw.tsv')
    output:
        str(CLASSIFY_FP/'kraken'/'{sample}-taxa.tsv')
    shell:
        """
        kraken-report \
        --db {Cfg[classify][kraken_db_fp]} \
        {input} > {output}
        """

rule kraken_mpa_report:
    input:
        str(CLASSIFY_FP/'kraken'/'raw'/'{sample}-raw.tsv')
    output:
        str(CLASSIFY_FP/'kraken'/'{sample}-mpa.tsv')
    shell:
        """
        kraken-mpa-report \
        --db {Cfg[classify][kraken_db_fp]} \
        {input} > {output}
        """
        
