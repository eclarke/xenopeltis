# -*- mode: Snakemake -*-
"""
Requirements for the igv functions:
 * IGV
 * xvfb
 * xdotool
"""

from pathlib import Path, PurePath
import socket
import time
import tempfile
import subprocess
import os
import re

def read_seq_ids(fasta_fp):
    """ Return the sequence identifiers for a given fasta filename. """
    ids = []
    with open(str(fasta_fp)) as f:
        for line in f:
            if line.startswith('>'):
                ids.append(re.split('[> ]', line)[1])
    return ids

# Find all genomes in the genomes_fp directory, and all sequences in each
# genome file.
GENOME_FILES = [f for f in Cfg['mapping']['genomes_fp'].glob('*.fasta')]
GENOMES = [PurePath(f.name).stem for f in Cfg['mapping']['genomes_fp'].glob('*.fasta')]
GENOME_SEGMENTS = {PurePath(g.name).stem: read_seq_ids(Cfg['mapping']['genomes_fp'] / g) for g in GENOME_FILES}
# Generate Snakemake template strings for a few commonly-used parameters below
# TODO: Should INDICES come from sunbeamlib.index_files()?
INDICES = expand(str(MAPPING_FP/"{{genome}}.{s}.bt2"), s=["1","2","3","4", "rev.1", "rev.2"])
GENOME = str(Cfg['mapping']['genomes_fp'] / "{genome}.fasta")

rule bowtie2_all:
    input:
        # Create these three sets of files specifically:
        # * indexed sorted bam files
        # * bcf files
        # * screenshots of alignments made with IGV
        expand(str(MAPPING_FP/"{genome}-{sample}.sorted.bam.bai"), genome=GENOMES, sample=Samples.keys()),
        expand(str(MAPPING_FP/"{genome}-{sample}.raw.bcf"), genome=GENOMES, sample=Samples.keys()),
        [expand(str(MAPPING_FP/"{genome}-{segment}.alignment.png"), genome=g, segment=GENOME_SEGMENTS[g]) for g in GENOMES]

rule bowtie2_build:
    message: "Creating bowtie2 index files for {input}"
    input: GENOME
    output: INDICES
    params:
        genome="{genome}",
        mapping_fp=MAPPING_FP
    shell: "cd {params.mapping_fp} && bowtie2-build {input} {params.genome}"

rule bowtie2_align:
    message: "Aligning {wildcards.sample} reads to genome {wildcards.genome}"
    input:
        rp = expand(str(Cfg['all']['data_fp'] / Cfg['all']['filename_fmt']), rp = ['R1','R2'], sample="{sample}"),
        indices = INDICES
    output: temp(str(MAPPING_FP/"{genome}-{sample}.sam"))
    params:
        genome="{genome}",
        mapping_fp=MAPPING_FP
    shell: "bowtie2 -x {params.mapping_fp}/{params.genome} -1 {input.rp[0]} -2 {input.rp[1]} -S {output}"

rule samtools_view:
    message: "Converting {wildcards.genome}-{wildcards.sample} alignment from SAM to BAM format with samtools"
    input: str(MAPPING_FP/"{genome}-{sample}.sam")
    output: str(MAPPING_FP/"{genome}-{sample}.bam")
    shell: "samtools view -bS {input} > {output}"

rule samtools_sort:
    message: "Sorting {input} with samtools"
    input: str(MAPPING_FP/"{genome}-{sample}.bam")
    output: str(MAPPING_FP/"{genome}-{sample}.sorted.bam")
    shell: "samtools sort {input} > {output}"

rule samtools_index:
    message: "Indexing {input} with samtools"
    input: str(MAPPING_FP/"{genome}-{sample}.sorted.bam")
    output: str(MAPPING_FP/"{genome}-{sample}.sorted.bam.bai")
    shell: "samtools index {input} {output}"

rule samtools_mpileup:
    message: "Calling variants for {input.bam} with samtools and bcftools"
    input:
        bam = str(MAPPING_FP/"{genome}-{sample}.sorted.bam"),
        genome = GENOME
    output: str(MAPPING_FP/"{genome}-{sample}.raw.bcf")
    shell: "samtools mpileup -gf {input.genome} {input.bam} | bcftools call -Ob -v -c - > {output}"

# I'm creating each segment snapshot separate, but really it could be done in
# one IGV run.  Can Snakemake handle that?
rule igv_snapshot:
    message: "Create an alignment image for {wildcards.genome}-{wildcards.segment} with IGV"
    input:
        genome = GENOME,
        bams=expand(str(MAPPING_FP/"{{genome}}-{sample}.sorted.bam"), sample=Samples.keys()),
        bais=expand(str(MAPPING_FP/"{{genome}}-{sample}.sorted.bam.bai"), sample=Samples.keys())
    params:
        segment="{segment}"
    output:
        png=str(MAPPING_FP/"{genome}-{segment}.alignment.png")
    run:
        igv_render_script(input.genome, input.bams, output.png, params.segment)


### IGV Helper Functions


def igv_render_script(genome, bams, imagefile, seqID=None):
        """ Render an alignment to an image, given a genome and bam files.

        genome: path to a fasta file
        bams: list of path to a sorted, indexed bam file
        imagefile: path to the image to save
        seqID: (optional) sequence identifier to load from genome

        The image file may be smaller than expected.  See
        igv_render_socket_nonblocking() for an attempt to enlarge the window
        before saving the image.
        """
        input_paths = [str(Path(bam).resolve()) for bam in bams]
        genome_path = str(Path(genome).resolve())
        output_path = str( Path('.').resolve() / Path(imagefile) )
        genome_cmd = 'genome ' + genome_path
        if seqID:
            genome_cmd += "\ngoto %s" % seqID
        igvcommands = ['new',
            genome_cmd,
            'load ' + ','.join(input_paths),
            'collapse',
            'snapshot ' + output_path,
            'exit']
        igvscript = tempfile.NamedTemporaryFile()
        igvscript.writelines(map(lambda x: bytes(x+'\n', 'ascii'), igvcommands))
        igvscript.flush()
        # If previous genome files listed in IGV's preferences are no longer
        # available, IGV will throw a null pointer exception at startup and
        # batch commands will fail.  So, we'll use a preferences override file
        # to list the genome file used here.  (This is probably an IGV bug.  We
        # should see if it happens in the latest release.)
        # I've also tried setting IGV.Bounds in an attempt to make the window
        # larger, but it doesn't seem to have any effect.
        igvprefsfile = tempfile.NamedTemporaryFile()
        igvprefs = ["GENOME_LIST=;%s" % genome_path,
            "DEFAULT_GENOME_KEY=%s" % genome_path]
        igvprefstext = map(lambda x: bytes(x+'\n', 'ascii'), igvprefs)
        igvprefsfile.writelines(igvprefstext)
        igvprefsfile.flush()
        shell("xvfb-run -s '-screen 1 1920x1080x24' igv -o %s -b %s" % (igvprefsfile.name, igvscript.name))

def igv_render_socket_nonblocking(genome, bams, imagefile):
        input_paths = [str(Path(bam).resolve()) for bam in bams]
        genome_path = str(Path(genome).resolve())
        output_path = str( Path('.').resolve() / Path(imagefile) )

        # Start up IGV.  Use a port between 10000 and the max available, based
        # on the PID of this process.  (TODO is using this pid safe?)
        port = 10000 + os.getpid()%(2**16-10000)
        xauth = "/tmp/xauth-%d" % os.getpid()
        igv = subprocess.Popen(["xvfb-run", "-l", "-f" , xauth, "-s", "-screen 1 1920x1080x24", "igv", "-p", str(port)])

        # Connect to running IGV
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        while True:
            try:
                s.connect(('localhost', port))
                break
            except ConnectionRefusedError:
                time.sleep(0.5)

        # Based on http://unix.stackexchange.com/questions/5999/ :
        # This should make the window as large as the virtual X display, but in
        # practice my screenshots aren't going over 1280 x 1296.
        display = ":99"
        shell("DISPLAY="+display+" XAUTHORITY="+xauth+" xdotool search --onlyvisible --name IGV windowsize --sync 100% 100%")

        # Generate screenshot
        commands = ['new', 'genome ' + genome_path, 'load ' + ','.join(input_paths), 'collapse', 'snapshot ' + output_path, 'exit']
        s.sendall(bytes('\n'.join(commands), 'ascii'))
        s.close()
        igv.wait()

# NOTE: this version assumes an already-running IGV configured to allow access
# on the default port (60151), so it's not as useful for automation.
def igv_render_socket(genome, bams, imagefile):
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect(('localhost', 60151))
        input_paths = [str(Path(bam).resolve()) for bam in bams]
        genome_path = str(Path(genome).resolve())
        output_path = str( Path('.').resolve() / Path(imagefile) )
        commands = ['new', 'genome ' + genome_path, 'load ' + ','.join(input_paths), 'collapse', 'snapshot ' + output_path]
        s.sendall(bytes('\n'.join(commands), 'ascii'))
        s.close()
        while not Path(output_path).is_file():
            time.sleep(1)
